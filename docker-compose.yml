version: "3.6"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: always

  broker:
    image: confluentinc/cp-kafka:7.3.2
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    restart: always

  auth-postgres:
    image: postgres:latest
    container_name: auth-db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=nbsp
      - POSTGRES_DB=player
    env_file:
      - ./back/.env
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5432" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  auth-ms:
    build:
      context: ./back
      dockerfile: ./auth-ms/Dockerfile
    container_name: auth-ms
    ports:
      - "8081:8080"
    environment:
      - DB_HOST=host.docker.internal
      - DB_PORT=5432
      - DB_USER=nbsp
      - DB_NAME=player
      - DISPLAY_HOST:localhost:8081
    env_file:
      - ./back/.env
    depends_on:
      - auth-postgres
    restart: on-failure

  watch-postgres:
    image: postgres:latest
    container_name: watch-db
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=nbsp
      - POSTGRES_DB=player
    env_file:
      - ./back/.env
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5433" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  watch-ms:
    build:
      context: ./back
      dockerfile: ./watch-ms/Dockerfile
    container_name: watch-ms
    ports:
      - "8082:8080"
    environment:
      - DB_HOST=host.docker.internal
      - DB_PORT=5433
      - DB_USER=nbsp
      - DB_NAME=player
      - DISPLAY_HOST=localhost:8082
      - BROKERS=broker:9092
    env_file:
      - ./back/.env
    depends_on:
      - watch-postgres
    restart: on-failure

  upload-ms:
    build:
      context: ./back
      dockerfile: ./upload-ms/Dockerfile
    container_name: upload-ms
    ports:
      - "8083:8080"
    environment:
      - DISPLAY_HOST=localhost:8083
      - BROKERS=broker:9092
      - WRITE_BROKER=broker:9092
      - MINIO_ENDPOINT=minio:9000
    env_file:
      - ./back/.env
    depends_on:
      - minio
    restart: on-failure

  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "8080:443"
    depends_on:
      - auth-ms
      - watch-ms
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    restart: always

  minio:
    image: minio/minio:latest
    container_name: minio
    command: server --console-address ":9001" /data/
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=nbsp
      - MINIO_STORAGE_USE_HTTPS=False
    env_file:
      - ./back/.env
    volumes:
      - minio-storage:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: always





volumes:
  minio-storage: